generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  user_id              Int        @id @default(autoincrement())
  email                String     @unique
  password             String?
  phone                String?    @unique
  first_name           String?
  last_name            String?
  date_ob              DateTime?
  avatar               String?
  role                 Role
  verified             Boolean    @default(false)
  created_at           DateTime   @default(now())
  updated_at           DateTime   @default(now())
  username             String?
  google_id            String?
  password_reset_token String?
  verify_token         String?
  referral_code        String
  Address              Address[]
  cartItems            CartItem[]
  discounts            Discount[]
  orders               Order[]
  referralsReceived    Referral[] @relation("ReferredRelation")
  Store                Store?
  Voucher              Voucher[]
}

model Address {
  address_id   Int      @id @default(autoincrement())
  user_id      Int
  address      String
  subdistrict  String?
  city         String
  city_id      String
  province     String
  province_id  String
  postcode     String?
  latitude     Float
  longitude    Float
  is_primary   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  address_name String
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model Referral {
  ref_id        Int      @id @default(autoincrement())
  referrer_id   Int      @unique
  referred_id   Int?
  referral_code String   @unique
  reward_id     Int?
  referred      User?    @relation("ReferredRelation", fields: [referred_id], references: [user_id])
  reward        Voucher? @relation(fields: [reward_id], references: [voucher_id])
}

model Voucher {
  voucher_id   Int        @id @default(autoincrement())
  voucher_code String?    @unique
  user_id      Int
  discount_id  Int
  is_redeemed  Boolean    @default(false)
  redeemed_at  DateTime?
  created_at   DateTime   @default(now())
  expires_at   DateTime
  Referral     Referral[]
  discount     Discount   @relation(fields: [discount_id], references: [discount_id])
  user         User       @relation(fields: [user_id], references: [user_id])
}

model Discount {
  discount_id        Int       @id @default(autoincrement())
  store_id           Int?
  product_id         Int?
  discount_code      String    @unique
  discount_type      Type
  discount_value     Int
  minimum_order      Int?
  expires_at         DateTime
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now())
  userUser_id        Int?
  discount_thumbnail String?
  product            Product?  @relation(fields: [product_id], references: [product_id])
  store              Store?    @relation(fields: [store_id], references: [store_id])
  User               User?     @relation(fields: [userUser_id], references: [user_id])
  Voucher            Voucher[]
}

model Store {
  store_id    Int         @id @default(autoincrement())
  store_name  String      @unique
  address     String
  subdistrict String?
  city        String
  province    String
  postcode    String
  latitude    Float
  longitude   Float
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now())
  user_id     Int?        @unique
  Discount    Discount[]
  Inventory   Inventory[]
  Order       Order[]
  Product     Product[]
  User        User?       @relation(fields: [user_id], references: [user_id])
}

model Category {
  category_id        Int       @id @default(autoincrement())
  category_name      String
  description        String
  created_at         DateTime  @default(now())
  updated_at         DateTime  @default(now())
  category_thumbnail String?
  Product            Product[]
}

model Product {
  product_id   Int            @id @default(autoincrement())
  store_id     Int
  name         String
  description  String
  price        Int
  category_id  Int
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  CartItem     CartItem[]
  Discount     Discount[]
  Inventory    Inventory[]
  OrderItem    OrderItem[]
  category     Category       @relation(fields: [category_id], references: [category_id])
  store        Store          @relation(fields: [store_id], references: [store_id])
  ProductImage ProductImage[]
}

model ProductImage {
  image_id   Int      @id @default(autoincrement())
  product_id Int
  url        String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  product    Product  @relation(fields: [product_id], references: [product_id])
}

model Inventory {
  inv_id     Int      @id @default(autoincrement())
  store_id   Int
  product_id Int
  qty        Int
  total_qty  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  product    Product  @relation(fields: [product_id], references: [product_id])
  store      Store    @relation(fields: [store_id], references: [store_id])
}

model Order {
  order_id     Int         @id @default(autoincrement())
  user_id      Int
  store_id     Int
  order_status OrderStatus
  total_price  Float
  created_at   DateTime    @default(now())
  updated_at   DateTime    @default(now())
  store        Store       @relation(fields: [store_id], references: [store_id])
  user         User        @relation(fields: [user_id], references: [user_id])
  OrderItem    OrderItem[]
  Shipping     Shipping[]
}

model OrderItem {
  orderitem_id Int     @id @default(autoincrement())
  order_id     Int
  product_id   Int
  qty          Int
  price        Int
  total_price  Int
  order        Order   @relation(fields: [order_id], references: [order_id])
  product      Product @relation(fields: [product_id], references: [product_id])
}

model Shipping {
  shipping_id      Int            @id @default(autoincrement())
  order_id         Int
  shipping_cost    Float
  shipping_address String
  shipping_status  ShippingStatus
  created_at       DateTime       @default(now())
  updated_at       DateTime       @default(now())
  order            Order          @relation(fields: [order_id], references: [order_id])
}

model CartItem {
  cartitem_id Int      @id @default(autoincrement())
  user_id     Int
  product_id  Int
  quantity    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  product     Product  @relation(fields: [product_id], references: [product_id])
  user        User     @relation(fields: [user_id], references: [user_id])
}

enum Role {
  customer
  store_admin
  super_admin
}

enum OrderStatus {
  pending
  awaiting_payment
  processing
  shipped
  completed
  cancelled
}

enum ShippingStatus {
  pending
  shipped
  delivered
}

enum Type {
  point
  percentage
}

enum ChangeType {
  email
  password
  username
  date_ob
  avatar
  phone
  name
}
